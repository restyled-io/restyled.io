#!/bin/sh
set -e

if [ -z "$1" ] || [ "$1" = upgrade ]; then
  for db in dev test; do
    echo "Upgrading $db database"
    "$0" "$db" upgrade
  done

  exit
fi

migrations=$(cd "$(dirname "$0")" && pwd)/migrations

case "$1" in
  dev)
    DBM_DATABASE=postgres://postgres:password@localhost/restyled
    ;;
  test)
    DBM_DATABASE=postgres://postgres:password@localhost/restyled_test
    ;;
  prod)
    HEROKU_API_KEY=${HEROKU_API_KEY:-$(heroku auth:token)}
    export HEROKU_API_KEY
    DBM_DATABASE=$(curl --silent --fail --show-error \
      --header "Authorization: Bearer $HEROKU_API_KEY" \
      --header "Accept: application/vnd.heroku+json; version=3" \
      https://api.heroku.com/apps/restyled-io/config-vars |
      jq --raw-output '.DATABASE_URL')
    ;;
  *)
    echo "usage: migrate <env> <cmd>" >&2
    exit 64
    ;;
esac

if [ "$2" = check ]; then
  if $0 "$1" upgrade-list 2>/dev/null | grep -Fqx 'Database is up to date.'; then
    echo "Database is up to date." >&2
    exit 0
  else
    echo "Database is not up to date. Run upgrade-list to see pending migrations." >&2
    exit 1
  fi
fi

shift

it_options=''

if [ -t 0 ]; then
  it_options='--interactive --tty'
fi

# shellcheck disable=2086
docker run --rm --net=host $it_options \
  --volume "$migrations:/migrations" \
  --env DBM_DATABASE="$DBM_DATABASE" \
  --env DBM_MIGRATION_STORE=/migrations \
  pbrisbin/dbmigrations:3.0.0-postgresql dbm "$@"
